{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","digest","useState","show","setShow","className","style","recipe","src","alt","map","ingredient","text","Accordion","Card","Header","Toggle","onClick","variant","eventKey","Collapse","Body","label","App","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","placeholder","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,mMCmD3CC,EA9CA,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACrD,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAKA,OACE,sBAAKC,UAAWC,IAAMC,OAAtB,UACE,6BAAKV,IACL,qBAAKQ,UAAWC,IAAMP,MAAOS,IAAKT,EAAOU,IAAI,KAC7C,iCACE,4CAAmB,IAClBT,EAAYU,KAAI,SAACC,GAAD,OACf,6BAAKA,EAAWC,aAIpB,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,OAAN,WACE,uCAAc,IACd,cAACF,EAAA,EAAUG,OAAX,CAAkBC,QAjBT,kBAAMb,GAASD,IAiBee,QAAQ,OAAOC,SAAS,IAA/D,0BAIF,cAACN,EAAA,EAAUO,SAAX,CAAoBD,SAAS,IAA7B,SACE,cAACL,EAAA,EAAKO,KAAN,UACGlB,GACC,+BACGF,EAAOS,KAAI,SAACT,GAAD,OACV,6BAAKA,EAAOqB,sBAQ1B,8BACG,IACD,yCAFF,IAEmBxB,SCqBVyB,G,MA7DH,WACV,IAGA,EAA8BrB,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBC,EAAhB,KACA,EAA4BvB,mBAAS,IAArC,mBAAOwB,EAAP,KAAeC,EAAf,KACA,EAA0BzB,mBAAS,WAAnC,mBAAO0B,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAmBhB,OACE,sBAAKhC,UAAU,MAAf,UACE,uBAAMmC,SARQ,SAACC,GACjBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKmBtB,UAAU,cAArC,UACE,uBACEA,UAAU,aACVsC,KAAK,OACLC,MAAOlB,EACPmB,YAAY,SACZC,SAlBa,SAACL,GACpBd,EAAUc,EAAEM,OAAOH,UAmBf,wBAAQvC,UAAU,gBAAgBsC,KAAK,SAAvC,uBAIF,qBAAKtC,UAAU,UAAf,SACGmB,EAAQd,KAAI,SAACH,GAAD,OACX,cAAC,EAAD,CAEEV,MAAOU,EAAOA,OAAOe,MACrBxB,SAAUS,EAAOA,OAAOT,SACxBC,MAAOQ,EAAOA,OAAOR,MACrBC,YAAaO,EAAOA,OAAOP,YAC3BC,OAAQM,EAAOA,OAAON,QALjBM,EAAOA,OAAOe,iBC1ChB0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.10b8b669.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};","import React, { useState } from \"react\";\nimport style from \"./recipe.module.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\n\nconst Recipe = ({ title, calories, image, ingredients, digest }) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(!show);\n\n  return (\n    <div className={style.recipe}>\n      <h1>{title}</h1>\n      <img className={style.image} src={image} alt=\"\" />\n      <list>\n        <b>Ingredients</b>{\" \"}\n        {ingredients.map((ingredient) => (\n          <li>{ingredient.text}</li>\n        ))}\n      </list>\n\n      <Accordion>\n        <Card>\n          <Card.Header>\n            <b>Digest</b>{\" \"}\n            <Accordion.Toggle onClick={handleShow} variant=\"link\" eventKey=\"0\">\n              More info\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"0\">\n            <Card.Body>\n              {show && (\n                <list>\n                  {digest.map((digest) => (\n                    <li>{digest.label}</li>\n                  ))}\n                </list>\n              )}\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n      <p>\n        {\" \"}\n        <b>Calories</b> {calories}\n      </p>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\n/**/\n\nconst App = () => {\n  const APP_ID = \"edf0da85\";\n  const APP_KEY = \"f7ce8a0a2cff9447606274d9e264d277\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"Whiskey\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          placeholder=\"Search\"\n          onChange={updateSearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            digest={recipe.recipe.digest}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}